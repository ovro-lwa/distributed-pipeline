import pytest

from orca.extra import source_find
from os import path

import tempfile
import shutil

import os

import numpy as np

TEST_DIFF_IM = f'{path.dirname(__file__)}/../resources/diff_2018-03-22T15:57:44-image.fits'
EXPECTED_CAT = f'{path.dirname(__file__)}/../resources/diff_2018-03-22T15:57:44-image_sfind_marin.npz'


@pytest.mark.skipif('TRAVIS' in os.environ, reason="Numerical instability on travis")
@pytest.mark.parametrize("n_proc", [1, 16])
def test_source_find_correctness(n_proc):
    # Test against the catalog generated by Marin's script.
    with tempfile.TemporaryDirectory() as dir:
        shutil.copy(TEST_DIFF_IM, f'{dir}/test.fits')
        out_npy = source_find.sourcefind_multithread(f'{dir}/test.fits',
                                                     (0.47967978178195703, 0.22426370283084199, 49.280091354775998),
                                                     n_proc=n_proc)
        ans = np.load(out_npy)
        expected = np.load(EXPECTED_CAT)

        # quick cross-matching since the ordering of the sources can be different
        ans_i = np.argsort(ans['xpos_abs'])
        exp_i = np.argsort(expected['xpos_abs'])

        # Different roundoff schemes
        assert np.all(np.abs(ans['xpos_abs'][ans_i] - expected['xpos_abs'][exp_i]) <= 1)
        assert np.all(np.abs(ans['ypos_abs'][ans_i] - expected['ypos_abs'][exp_i]) <= 1)

        assert np.all(np.abs((ans['pkflux_abs'][ans_i] - expected['pkflux_abs'][exp_i]) /
                             expected['pkflux_abs'][exp_i]) < 0.3)

